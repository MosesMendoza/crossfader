#! /opt/crossfader/runtime/bin/ruby
#
%w{PATH GEM_HOME GEM_PATH}.each do |key|
  if ENV[key]
    ENV["XFADE_#{key}_ORIG"] ||= ENV[key]
  end
end

ENV['GEM_HOME'] = "/opt/crossfader/runtime/gemsets/crossfader"
ENV['GEM_PATH'] = "/opt/crossfader/runtime/gemsets/global:/opt/crossfader/runtime/lib/ruby/gems/1.9.1"

require 'rubygems'
require 'trollop'
require 'json'

class Application
  VERSION = '1.2.4'

  attr_reader :env, :argv, :opts, :home, :environment

  def initialize(opts = {})
    @env = opts[:env] || ENV.to_hash
    @argv = opts[:argv] || ARGV.dup
    @home = opts[:home] || '/opt/crossfader'
    parse_options!
  end

  def parse_options!
    @opts = Trollop.options(argv) do
      stop_on_unknown
      version "crossfader #{VERSION} (c) 2013 Puppet Labs"
          banner <<-EOBANNER
usage: crossfader [GLOBAL OPTIONS] COMMAND [ARGS]
Commands:
   exec       Execute a system command (exec puppet --version)
   list       List available tool versions
   shellinit  Generate bourne shell environment on stdout.

Quick Start:
Add this line to your shell initialization scripts.

    eval "$(/opt/crossfader/bin/crossfader shellinit)"

Gemsets:
To install a gem into a specific gemset:

    $ sudo /opt/crossfader/bin/crossfader --gemset=puppet \
        exec gem install puppet

Environment:
In an effort to avoid large command line argument lists, some options will take
their default value from the environment.  If an option lists an environment
variable in all caps in curly braces ({}), then the default value of that
option will depend on the value of the environment variable.

Global options:
          EOBANNER
      opt :ruby, "Ruby version to use {CROSSFADER_RUBY}",
        :type => :string,
        :default => ENV['CROSSFADER_RUBY'] || '1.9.3-p448'

      opt :gemset, "Gemset to use {CROSSFADER_GEMSET}",
        :type => :string,
        :default => ENV['CROSSFADER_GEMSET'] || 'crossfader'

      opt :debug, "Enable debug messages"

      opt :bundle, "Turn bundle exec mode on {CROSSFADER_BUNDLE_MODE}",
        :default => !!ENV['CROSSFADER_BUNDLE_MODE']
    end
  end

  def path
    [
      "#{home}/bin",
      "#{home}/gemsets/#{opts[:ruby]}/#{opts[:gemset]}/ruby/1.9.1/bin",
      "#{home}/gemsets/#{opts[:ruby]}/global/ruby/1.9.1/bin",
      "#{home}/versions/ruby/#{opts[:ruby]}/bin",
      ENV['PATH'],
    ].join(':')
  end

  def gem_home
    @gem_home ||= "#{home}/gemsets/#{opts[:ruby]}/#{opts[:gemset]}/ruby/1.9.1"
  end

  def gem_path
    if @gem_path
      @gem_path
    else
      @gem_path = "#{home}/gemsets/#{opts[:ruby]}/global/ruby/1.9.1:#{home}/versions/ruby/#{opts[:ruby]}/lib/ruby/gems/1.9.1"
      if ENV['HOME']
        @gem_path << ":#{ENV['HOME']}/.gem/ruby/1.9.1"
      end
    end
  end

  ##
  # print_env prints out a bourn SH compatible script.  The intent is to eval
  # the result in a shell.  For example, in bash: eval "$(backline shellinit)"
  def print_env
    %w{PATH GEM_HOME GEM_PATH}.each do |key|
      if ENV["XFADE_#{key}_ORIG"]
        puts "XFADE_#{key}_ORIG='" + ENV["XFADE_#{key}_ORIG"] + "'"
      end
    end

    puts "export PATH='#{path}'"
    puts "export GEM_HOME='#{gem_home}'"
    puts "export GEM_PATH='#{gem_path}'"
    puts "export CROSSFADER_GEMSET=#{opts[:gemset]}"
  end

  def run
    cmd = argv.shift
    case cmd
    when 'shellinit'
      print_env
    when 'list'
      print_list
    when 'exec'
      exec *argv
    when 'puppet'
      run_puppet(argv)
    else
      Trollop.die "unknown subcommand #{(cmd || "").inspect}"
    end
  end

  ##
  # attempt to avoid ridiculousness like `crossover -g bundler exec bundle exec
  # puppet`
  #
  # @param [Arrag<String>] argv the Puppet argument vector.  This method will
  # set `--confdir` and `--vardir` immediately after the subcommand.
  def run_puppet(argv)
    # TODO: We explicitly don't allow the user to specify confdir and vardir
    # with backline.  This may become an issue, but they could fall back to
    # `backline exec`
    subcommand = argv.shift
    puppet_args = [ "puppet",
                    subcommand,
                    "--confdir=/etc/backline/puppet",
                    "--vardir=/var/lib/backline/puppet",
                    *argv ]
    exec *puppet_args
  end

  ##
  # Debug log a message if `--debug` is true
  def debug(msg)
    return unless opts[:debug]
    puts "Crossfader Debug: #{msg}"
  end

  ##
  # exec executes a system command using the configured environment.  For
  # example, this may be used to install gems into a specific gemset: `sudo
  # /opt/backline/bin/backline --gemset=backline exec gem install puppet`
  #
  # If the {opts[:bundle]} option is enabled then the puppet command will be
  # wrapped in bundle exec.
  def exec(*args)
    ENV['CROSSFADER_GEMSET'] = opts[:gemset]
    debug "CROSSFADER_GEMSET=#{ENV['CROSSFADER_GEMSET']}"
    ENV['PATH'] = path
    debug "PATH=#{ENV['PATH']}"
    ENV['GEM_HOME'] = gem_home
    debug "GEM_HOME=#{ENV['GEM_HOME']}"
    ENV['GEM_PATH'] = gem_path
    debug "GEM_PATH=#{ENV['GEM_PATH']}"

    bundle_args = [ 'bundle', 'exec' ] if opts[:bundle]
    cmd_vector = [*bundle_args, *args]
    debug "Executing: #{cmd_vector.inspect}"
    Kernel.exec *cmd_vector
  end

  ##
  # print_list prints out a list of gemsets currently present on the system.
  def print_list
    rubies = [
      *Dir["#{home}/versions/ruby/*"].collect { |d| File.basename(d) }
    ].sort.uniq

    gemsets = rubies.inject({}) do |memo, ruby|
      memo[ruby] = Dir["#{home}/gemsets/#{ruby}/*"].collect { |d| File.basename(d) }
      memo
    end

    data = { 'gemsets' => gemsets }

    puts JSON.pretty_generate(data)
  end
end

app = Application.new(:env => ENV.to_hash, :argv => ARGV.dup)
app.run
